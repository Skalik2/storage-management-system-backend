// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using storage_management_system.Data;

#nullable disable

namespace storage_management_system.Migrations
{
    [DbContext(typeof(PgContext))]
    [Migration("20241203190218_ChangeAcctionOperationSchema")]
    partial class ChangeAcctionOperationSchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("storage_management_system.Model.Entities.Access", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BoxId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BoxId");

                    b.HasIndex("UserId");

                    b.ToTable("Access");
                });

            modelBuilder.Entity("storage_management_system.Model.Entities.Box", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("SectionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.ToTable("Box");
                });

            modelBuilder.Entity("storage_management_system.Model.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("storage_management_system.Model.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("storage_management_system.Model.Entities.ItemInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BoxId")
                        .HasColumnType("integer");

                    b.Property<int>("ItemId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BoxId");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemInstance");
                });

            modelBuilder.Entity("storage_management_system.Model.Entities.ItemPicture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageName")
                        .HasColumnType("text");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ItemId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ItemPicture");
                });

            modelBuilder.Entity("storage_management_system.Model.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("storage_management_system.Model.Entities.Operation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Operation");
                });

            modelBuilder.Entity("storage_management_system.Model.Entities.Row", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("StorageId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StorageId");

                    b.ToTable("Row");
                });

            modelBuilder.Entity("storage_management_system.Model.Entities.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("RowId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RowId");

                    b.ToTable("Section");
                });

            modelBuilder.Entity("storage_management_system.Model.Entities.Storage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int?>("LocationId")
                        .HasColumnType("integer");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("LocationId");

                    b.ToTable("Storage");
                });

            modelBuilder.Entity("storage_management_system.Model.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Administrative")
                        .HasColumnType("boolean");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Service")
                        .HasColumnType("boolean");

                    b.Property<string>("Username")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("storage_management_system.Model.Entities.UserAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BoxId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("OperationId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("interval");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BoxId");

                    b.HasIndex("OperationId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAction");
                });

            modelBuilder.Entity("storage_management_system.Model.Entities.Access", b =>
                {
                    b.HasOne("storage_management_system.Model.Entities.Box", "Box")
                        .WithMany("Accesses")
                        .HasForeignKey("BoxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("storage_management_system.Model.Entities.User", "User")
                        .WithMany("Accesses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Box");

                    b.Navigation("User");
                });

            modelBuilder.Entity("storage_management_system.Model.Entities.Box", b =>
                {
                    b.HasOne("storage_management_system.Model.Entities.Section", "Section")
                        .WithMany("Boxes")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Section");
                });

            modelBuilder.Entity("storage_management_system.Model.Entities.ItemInstance", b =>
                {
                    b.HasOne("storage_management_system.Model.Entities.Box", "Box")
                        .WithMany()
                        .HasForeignKey("BoxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("storage_management_system.Model.Entities.Item", "Item")
                        .WithMany("ItemInstances")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Box");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("storage_management_system.Model.Entities.Row", b =>
                {
                    b.HasOne("storage_management_system.Model.Entities.Storage", "Storage")
                        .WithMany("Rows")
                        .HasForeignKey("StorageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Storage");
                });

            modelBuilder.Entity("storage_management_system.Model.Entities.Section", b =>
                {
                    b.HasOne("storage_management_system.Model.Entities.Row", "Row")
                        .WithMany("Sections")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Row");
                });

            modelBuilder.Entity("storage_management_system.Model.Entities.Storage", b =>
                {
                    b.HasOne("storage_management_system.Model.Entities.Company", "Company")
                        .WithMany("Storages")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("storage_management_system.Model.Entities.Location", "Location")
                        .WithMany("Storages")
                        .HasForeignKey("LocationId");

                    b.Navigation("Company");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("storage_management_system.Model.Entities.User", b =>
                {
                    b.HasOne("storage_management_system.Model.Entities.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("storage_management_system.Model.Entities.UserAction", b =>
                {
                    b.HasOne("storage_management_system.Model.Entities.Box", "Box")
                        .WithMany("UserActions")
                        .HasForeignKey("BoxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("storage_management_system.Model.Entities.Operation", "Operation")
                        .WithMany("UserActions")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("storage_management_system.Model.Entities.User", "User")
                        .WithMany("UserActions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Box");

                    b.Navigation("Operation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("storage_management_system.Model.Entities.Box", b =>
                {
                    b.Navigation("Accesses");

                    b.Navigation("UserActions");
                });

            modelBuilder.Entity("storage_management_system.Model.Entities.Company", b =>
                {
                    b.Navigation("Storages");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("storage_management_system.Model.Entities.Item", b =>
                {
                    b.Navigation("ItemInstances");
                });

            modelBuilder.Entity("storage_management_system.Model.Entities.Location", b =>
                {
                    b.Navigation("Storages");
                });

            modelBuilder.Entity("storage_management_system.Model.Entities.Operation", b =>
                {
                    b.Navigation("UserActions");
                });

            modelBuilder.Entity("storage_management_system.Model.Entities.Row", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("storage_management_system.Model.Entities.Section", b =>
                {
                    b.Navigation("Boxes");
                });

            modelBuilder.Entity("storage_management_system.Model.Entities.Storage", b =>
                {
                    b.Navigation("Rows");
                });

            modelBuilder.Entity("storage_management_system.Model.Entities.User", b =>
                {
                    b.Navigation("Accesses");

                    b.Navigation("UserActions");
                });
#pragma warning restore 612, 618
        }
    }
}
